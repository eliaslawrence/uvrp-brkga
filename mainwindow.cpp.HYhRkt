#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "core.h"

#include <iostream>
#include <ostream>

#define PRINT 1
//#define NDEBUG 1

#ifndef NDEBUG
#define MN_DEBUG 1 //uncomment to activate debug mode
#endif

#ifdef MN_DEBUG
#define DEBUG
#else
#define DEBUG while(false)
#endif

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    scene = new QGraphicsScene(this);
    ui->graphicsView->setScene(scene);
}

MainWindow::MainWindow(QWidget *parent, int _argc, char ** _argv) :
    QMainWindow(parent),
    ui(new Ui::MainWindow),
    argc(_argc),
    argv(_argv)
{
    ui->setupUi(this);

    scene = new QGraphicsScene(this);
    ui->graphicsView->setScene(scene);
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::reset_canvas()
{
    scene->clear();
    scene->setSceneRect(0, 0, ui->graphicsView->viewport()->width(), ui->graphicsView->viewport()->height());
}

void MainWindow::update_interval(const UVRP::ProblemInstance& instance)
{
    interval_horizontal_size = floor((ui->graphicsView->viewport()->width()  - 2 * MARGIN_SIZE - instance.col   * POINT_SIZE)/(instance.col   - 1));
    interval_vertical_size   = floor((ui->graphicsView->viewport()->height() - 2 * MARGIN_SIZE - instance.lines * POINT_SIZE)/(instance.lines - 1));
}

void MainWindow::showEvent( QShowEvent* event ) {
    QWidget::showEvent( event );
    reset_canvas();
}

void MainWindow::resizeEvent(QResizeEvent* event)
{
   QMainWindow::resizeEvent(event);
   reset_canvas();
   if(ptrInstance){
       update_interval(*ptrInstance);
       print_solution(*ptrInstance, (*getInd((*ptrBRKGA).getLastExecutionPopulation()[0])).getR());
       print_map(*ptrInstance);
   }
}

void MainWindow::print_point(Point point)
{
    QBrush gray_brush(Qt::gray);
    QPen gray_pen(Qt::gray);

    QBrush red_brush(Qt::red);
    QPen red_pen(Qt::red);

    QBrush blue_brush(Qt::blue);
    QPen blue_pen(Qt::blue);

    QBrush green_brush(Qt::green);
    QPen green_pen(Qt::green);

    QBrush actual_brush;
    QPen actual_pen;

    switch (point.type) {
    case UVRP::NOTHING:
        actual_brush = gray_brush;
        actual_pen = gray_pen;
        break;
    case UVRP::COLLECT:
        actual_brush = red_brush;
        actual_pen = red_pen;
        break;
    case UVRP::DELIVER:
        actual_brush = blue_brush;
        actual_pen = blue_pen;
        break;
    case UVRP::RECHARGE:
        actual_brush = green_brush;
        actual_pen = green_pen;
        break;
    case UVRP::PROHIBITED:
        actual_brush = red_brush;
        actual_pen = red_pen;
        break;
    }

    scene->addEllipse(MARGIN_SIZE + (interval_horizontal_size + POINT_SIZE)*point.x,
                      MARGIN_SIZE + (interval_vertical_size   + POINT_SIZE)*point.y,
                      POINT_SIZE, POINT_SIZE, actual_pen, actual_brush);
}

void MainWindow::print_map(const UVRP::ProblemInstance& instance)
{
//    ui->graphicsView->fitInView();

    QBrush blackBrush(Qt::black);
    QPen blackpen(Qt::black);


    QBrush redBrush(Qt::red);
    QPen redpen(Qt::red);

    QBrush blueBrush(Qt::blue);
    QPen bluepen(Qt::blue);

    Point pnt;
    for (int i = 0; i < instance.grid.size(); ++i) {
        for (int j = 0; j < instance.grid[i].size(); ++j) {
            pnt.x = j;
            pnt.y = i;
            pnt.type = instance.grid[i][j];
            print_point(pnt);
        }
    }
}

void MainWindow::print_solution(const UVRP::ProblemInstance& instance, const UVRP::Representation& rep)
{
    QPen black_pen(Qt::black);
    black_pen.setWidth(LINE_SIZE);

    auto update_x = [&](const unsigned& dir, const int& actual_x)->int{
        int x = actual_x;
        switch (dir) {
        case UVRP::DIRECTIONS::NE:
            x++;
            break;
        case UVRP::DIRECTIONS::E:
            x++;
            break;
        case UVRP::DIRECTIONS::SE:
            x++;
            break;
        case UVRP::DIRECTIONS::SW:
            x--;
            break;
        case UVRP::DIRECTIONS::W:
            x--;
            break;
        case UVRP::DIRECTIONS::NW:
            x--;
            break;
        }

        return x;
    };

    auto update_y = [&](const unsigned& dir, const int& actual_y)->int{
        int y = actual_y;
        switch (dir) {
        case UVRP::DIRECTIONS::N:
            y--;
            break;
        case UVRP::DIRECTIONS::NE:
            y--;
            break;
        case UVRP::DIRECTIONS::SE:
            y++;
            break;
        case UVRP::DIRECTIONS::S:
            y++;
            break;
        case UVRP::DIRECTIONS::SW:
            y++;
            break;
        case UVRP::DIRECTIONS::NW:
            y--;
            break;
        }

        return y;
    };

    int x0 = instance.origin_x;
    int y0 = instance.origin_y;

    int x1, y1;

    srand(time(NULL));
    int r = rand() % 255;
    int g = rand() % 255;
    int b = rand() % 255;
    QColor color(r, g, b, 1);

    color.setAlpha(255);
    black_pen.setColor(color);

    int ind = 1;
    for(const std::pair<int, int>& pair : rep.pos) {
        x1 = getX(pair);
        y1 = getY(pair);

//        black_pen.setColor(color);
        scene->addLine(MARGIN_SIZE + (interval_horizontal_size + POINT_SIZE) * x0 + POINT_SIZE/2,
                       MARGIN_SIZE + (  interval_vertical_size + POINT_SIZE) * y0 + POINT_SIZE/2,
                       MARGIN_SIZE + (interval_horizontal_size + POINT_SIZE) * x1 + POINT_SIZE/2,
                       MARGIN_SIZE + (  interval_vertical_size + POINT_SIZE) * y1 + POINT_SIZE/2,
                       black_pen);

        x0 = x1;
        y0 = y1;

        if(ind > rep.finalPos){
            break;
        }

        ++ind;
    }

//    std::cout << "Size: " << rep.pos.size() << std::endl;
//    std::cout << "Final Pos: " << rep.finalPos << std::endl;
}

void MainWindow::on_actionLoad_triggered()
{

}

void MainWindow::on_actionAMOVND_triggered()
{

}

void MainWindow::on_actionEvaluate_triggered()
{

}

void MainWindow::on_actionNeural_Network_triggered()
{

}

void MainWindow::set_actual_play(int index) // pointer
{
//    Solution * play = a_solutions[currentRow];

    string s_info_play;
//    s_info_play.append("Play #");
//    s_info_play.append(std::to_string(currentRow));


//    s_info_play.append("\nSize : ");

//    for (int pos_route = 0; pos_route < play->get_size(); pos_route++) {
//        s_info_play.append(std::to_string(play->uavs[pos_route]->get_size()));
//        s_info_play.append(" ");
//    }

//    s_info_play.append("\nFinal Charge : ");
//    s_info_play.append(std::to_string(play->objectives[1]));

//    s_info_play.append("\nTime : ");
//    s_info_play.append(std::to_string((-1) * play->objectives[2]));

//    s_info_play.append("\nConsumption : ");
//    s_info_play.append(std::to_string((-1) * play->objectives[3]));

//    s_info_play.append("\nIteration : ");
//    s_info_play.append(std::to_string(play->iteration));

//    s_info_play.append("\nValid : ");
//    s_info_play.append(play->valid ? "true" : "false");

//    s_info_play.append("\n\nVelocity : \n\n");
//    for (int pos_route = 0; pos_route < play->get_size(); pos_route++) {
//        for (int i = 0; i < play->uavs[pos_route]->get_size(); i++) {
//            s_info_play.append(std::to_string(play->uavs[pos_route]->get_movement(i)->vel));
//            s_info_play.append(" | ");
//        }

//        s_info_play.append("\n\n");
//    }

//    s_info_play.append("\n\nCharge Rate : \n\n");
//    Matrix * m_map = core.get_map();
//    for (int pos_route = 0; pos_route < play->get_size(); pos_route++) {
//        for (int i = 0; i < play->uavs[pos_route]->get_size(); i++) {
//            int type = m_map->get_stop_point(play->uavs[pos_route]->get_movement(i)->get_x(), play->uavs[pos_route]->get_movement(i)->get_y()).get_type();
//            if(type == STOPS::CHARGE){
//                s_info_play.append(std::to_string(play->uavs[pos_route]->get_movement(i)->charge_rate));
//                s_info_play.append(" | ");
//            }
//        }
//        s_info_play.append("\n\n");
//    }

    const UVRP_Evaluation& evaluation = *((*getInd((*ptrBRKGA).getLastExecutionPopulation()[index])).getADS().evaluation);

    s_info_play.append("Clients : ");
    s_info_play.append(std::to_string(getClientsCount(evaluation)));
    s_info_play.append("\n");
    s_info_play.append("TotalTime : ");
    s_info_play.append(std::to_string(getTime(evaluation)));
    s_info_play.append("\n");
    s_info_play.append("Consumption : ");
    s_info_play.append(std::to_string(getConsumption(evaluation)));
    s_info_play.append("\n");
    s_info_play.append("FinalCharge : ");
    s_info_play.append(std::to_string(getFinalCharge(evaluation)));
    s_info_play.append("\n");
    s_info_play.append("InvalidCharge : ");
    s_info_play.append(std::to_string(getInvChargeCount(evaluation)));
    s_info_play.append("\n");
    s_info_play.append("OutOfBounds : ");
    s_info_play.append(std::to_string(getOutOfBoundsCount(evaluation)));
    s_info_play.append("\n");
    s_info_play.append("ProhibitedPoints : ");
    s_info_play.append(std::to_string(getProhibitedCount(evaluation)));

    ui->teSelectedPlay->setText(QString::fromStdString(s_info_play));

    reset_canvas();
    print_solution(*ptrInstance, (*getInd((*ptrBRKGA).getLastExecutionPopulation()[index])).getR());
    print_map(*ptrInstance);
}

void MainWindow::on_actionBRKGA_triggered()
{
    int seed = 0, factor = 8;
    unsigned maximumPopulationSize;
    double top = 0.25, bot = 0.45, rho = 0.5;//0.3 0.15 0.7    2 0.25 0.15 0.5
    unsigned generations = 500;
    unsigned chromossomeSize = 5;
    double timeLimit = 60.0;

//    UVRP::ProblemInstance instance(seed, "/home/elias/Documents/Mestrado/uav_routing_qt/UAV_Routing_Qt_1/instances/eil51.tsp");
    ptrInstance = std::unique_ptr<UVRP::ProblemInstance>(new UVRP::ProblemInstance(seed, "/home/elias/Documents/Mestrado/uav_routing_qt/UAV_Routing_Qt_1/instances/eil51.tsp"));
    chromossomeSize = (unsigned) (*ptrInstance).col * (*ptrInstance).lines / 2;

    chromossomeSize = 20;//(*ptrInstance).clients.size();//specialPoints

    update_interval(*ptrInstance);

    UVRP::Evaluator evaluator(*ptrInstance);
    UVRP::AStar astar(*ptrInstance);
    BRKGA::Decoder decoder(*ptrInstance, astar);

    maximumPopulationSize = factor*chromossomeSize;
//    BRKGA::CL_BRKGA brkga(*ptrInstance, evaluator, decoder, maximumPopulationSize, chromossomeSize, top, bot, rho);
    ptrBRKGA = std::unique_ptr<BRKGA::CL_BRKGA>(new BRKGA::CL_BRKGA(*ptrInstance, evaluator, decoder, astar, maximumPopulationSize, chromossomeSize, top, bot, rho));


    UVRP_Solution solution = (*ptrBRKGA)(generations);

//	#ifdef PRINT
    if(!evaluator.is_feasible(solution)) //if the solution isn't feasible then there's a mistake in the instance or the code itself
        std::cout << "Is infeasible" << std::endl;
    std::cout << "Run time in seconds: " << std::fixed << std::setprecision(3) << (*ptrBRKGA).getLastExecutionTime() << std::endl;
    std::cout << "Evaluation: " << solution.getADS() << std::endl;
//    std::cout << "Solution: " << std::endl << format(solution.getR()) << std::endl;
//    std::cout << "Seed used: " << instance.seed << std::endl;
//	#else
//	std::cout << instance.seed << ' ' << evaluator.is_feasible(solution) << std::endl;
//	std::cout << std::fixed << std::setprecision(3) << brkga.getLastExecutionTime() << std::endl;
//	std::cout << solution << std::endl;
//	#endif
//    ptrInstance = &instance;
//    ptrBRKGA    = &brkga;

//    BRKGA_Population population = brkga.getLastExecutionPopulation();
//    ptrPopulation = std::unique_ptr<BRKGA_Population> (new BRKGA_Population(population.size()));
//    ptrPopulation = std::move(population);
//    ptrPopulation = &population;

//    reset_canvas();
//    print_solution(*ptrInstance, (*getInd((*ptrBRKGA).getLastExecutionPopulation()[0])).getR());
//    print_map(*ptrInstance);

    string s_item;

    for (int i = 0; i < (*ptrBRKGA).getLastExecutionPopulation().size(); i++) {
        s_item = std::to_string(i);
        s_item.append(". ");

        std::ostringstream stream;
        stream << (*getInd((*ptrBRKGA).getLastExecutionPopulation()[i])).getR();
        s_item.append(stream.str());
        ui->listPlays->addItem(QString::fromStdString(s_item));
    }

//    print_map(*ptrInstance);
//    print_map(pntInstance);

}

void MainWindow::on_listPlays_currentRowChanged(int currentRow)
{
    set_actual_play(currentRow);
}

void MainWindow::on_listPlays_itemClicked(QListWidgetItem *item)
{
    set_actual_play(ui->listPlays->row(item));
}
